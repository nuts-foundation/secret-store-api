{
	"info": {
		"_postman_id": "db1d235f-365a-419b-bedb-11bbed7b4269",
		"name": "Secret Storage API Testsuite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17705190"
	},
	"item": [
		{
			"name": "Secret Lifecycle",
			"item": [
				{
					"name": "Setup: remove key if exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key removed\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404])",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create the key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key stored\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"secret\": \"{{secret_key_data}}\"\n}"
						},
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create the key again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key not stored\", () => {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"Error message should be as specified\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.eql(\"key already exists\");",
									"    pm.expect(responseJson.title).to.eql(\"Key already exists\");",
									"    pm.expect(responseJson.status).to.eql(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"secret\": \"{{secret_key_data}}\"\n}"
						},
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read the key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key read\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseJson = pm.response.json();",
									"    const expectedSecret = pm.collectionVariables.get(\"secret_key_data\");",
									"    pm.expect(responseJson.secret).to.eql(expectedSecret);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "List all keys (should contain key)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List contains the key\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.contain(\"key_lifecycle\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{api_address}}/secrets",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key removed\", () => {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove key again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key not found\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.be.json;",
									"})",
									"",
									"pm.test(\"Error message should be as specified\", () => {",
									"    const respJSON = pm.response.json();",
									"    pm.expect(respJSON.title).to.eql(\"could not delete secret\");",
									"    pm.expect(respJSON.detail).to.eql(\"key not found\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read key (should not exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Key should not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Error message should be as specified\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.detail).to.eql(\"key not found\");",
									"    pm.expect(responseJson.title).to.eql(\"Secret not found\");",
									"    pm.expect(responseJson.status).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{api_address}}/secrets/key_lifecycle",
							"host": [
								"{{api_address}}"
							],
							"path": [
								"secrets",
								"key_lifecycle"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_address",
			"value": "http://localhost:8210",
			"type": "default"
		},
		{
			"key": "secret_key_data",
			"value": "this is a very secret key",
			"type": "default"
		}
	]
}
